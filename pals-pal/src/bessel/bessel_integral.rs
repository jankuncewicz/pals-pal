#[path = "bessel_jn.rs"]
mod bessel;

const X: [f64; 10] = [
	0.078459095727844945033,
	0.2334453638559054117677,
	0.3826834323650897717285,
	0.5224985647159488649879,
	0.6494480483301836557263,
	0.760405965600030938175,
	0.8526401643540922215194,
	0.9238795325112867561282,
	0.9723699203976766018337,
	0.9969173337331279761978,
];

const WX: [f64; 10] = [
	0.156595408594615950774,
	0.152739509924651642746,
	0.1451226576069715507029,
	0.1339324038245205008694,
	0.119444289763745511447,
	0.1020150608761166979304,
	0.0820738826211418053373,
	0.0601117729884346270714,
	0.036669512005215434471,
	0.01232432593729480055,
];

pub fn gauss(start: f64, end: f64, n: i32) -> f64{
	let m = (end - start) / 2.0;
	let s = (start + end) / 2.0;
	let ans: f64 = X.iter().zip(WX).map(
		|(x, w)| 
			bessel::jn(n, m*x + s).powi(2) 
				* w * (m*x + s) +
			bessel::jn(n, -m*x + s).powi(2) 
				* w * (-m*x + s))
		.sum();

	if ans.is_nan() { return 0.0; }
	return m * ans;
}

/*
const X: [f64; 10] = [
	0.07652652113349733375,
	0.22778585114164507808,
	0.37370608871541956067,
	0.51086700195082709800,
	0.63605368072651502545,
	0.74633190646015079261,
	0.83911697182221882339,
	0.91223442825132590586,
	0.96397192727791379126,
	0.99312859918509492478,
];

const W: [f64; 10] = [
	0.15275338713072585069,
	0.14917298647260374678,
	0.14209610931838205132,
	0.13168863844917662689,
	0.11819453196151841731,
	0.10193011981724043503,
	0.08327674157670474872,
	0.06267204833410906357,
	0.04060142980038694133,
	0.01761400713915211831,
];

pub fn gauss(start: f64, end: f64, n: i32) -> f64{
	let mut ans = 0.0;
	let a = (start + end) / 2.0;
	let b = (end - start) / 2.0;
	for i in 0..W.len() {
		ans += W[i] * bessel::jn(n, b*X[i] + a).powi(2) * (b*X[i] + a);
		ans += W[i] * bessel::jn(n, -b*X[i] + a).powi(2) * (-b*X[i] + a);
	}
	if ans.is_nan() {
		return 0.0;
	}
	return b * ans;
}
*/